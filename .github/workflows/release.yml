name: Release on version tag

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - uses: iterative/setup-dvc@v1
        with:
          version: '2.10.2'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: snok/install-poetry@v1
        with:
          version: '1.2.0b1'
      - run: | # more convenient to do it here instead of having 3 multistage docker builds...
          pip install poetry-plugin-export
          poetry export --only main -o requirements.txt --without-hashes
          poetry export --with model-api -o requirements-model-api.txt --without-hashes
          poetry export --only scraper -o requirements-scraper.txt --without-hashes
          poetry export --only drift-monitor -o requirements-drift-monitor.txt --without-hashes
          poetry export --only so-agent -o requirements-so-agent.txt --without-hashes

      - name: Parse version info from tag
        run: |
          # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV

      - name: Pull trained models from DVC
        run: |
          dvc remote modify myremote gdrive_use_service_account true
          dvc pull train
        env:
          GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA }}

      - name: Login to registry
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push microservice image
        run: |
          IMG=`echo ghcr.io/${{ github.repository }}-service | tr '[:upper:]' '[:lower:]'`
          docker build -f Dockerfile.model-api \
            -t ${IMG}:latest \
            -t ${IMG}:${{ env.version_major }}-latest \
            -t ${IMG}:${{ env.version_major }}.${{ env.version_minor }}-latest \
            -t ${IMG}:${{ env.version }} \
            .
          docker push --all-tags $IMG

      - name: Build and push drift monitor image
        run: |
          IMG=`echo ghcr.io/${{ github.repository }}-drift-monitor | tr '[:upper:]' '[:lower:]'`
          docker build -f Dockerfile.drift-monitor \
            -t ${IMG}:latest \
            -t ${IMG}:${{ env.version_major }}-latest \
            -t ${IMG}:${{ env.version_major }}.${{ env.version_minor }}-latest \
            -t ${IMG}:${{ env.version }} \
            .
          docker push --all-tags $IMG
      
      - name: Build and push scraper image
        run: |
          IMG=`echo ghcr.io/${{ github.repository }}-scraper | tr '[:upper:]' '[:lower:]'`
          docker build -f Dockerfile.scraper \
            -t ${IMG}:latest \
            -t ${IMG}:${{ env.version_major }}-latest \
            -t ${IMG}:${{ env.version_major }}.${{ env.version_minor }}-latest \
            -t ${IMG}:${{ env.version }} \
            .
          docker push --all-tags $IMG

      - name: Build and push api agent image
        run: |
          IMG=`echo ghcr.io/${{ github.repository }}-so-agent | tr '[:upper:]' '[:lower:]'`
          docker build -f Dockerfile.so-agent \
            -t ${IMG}:latest \
            -t ${IMG}:${{ env.version_major }}-latest \
            -t ${IMG}:${{ env.version_major }}.${{ env.version_minor }}-latest \
            -t ${IMG}:${{ env.version }} \
            .
          docker push --all-tags $IMG